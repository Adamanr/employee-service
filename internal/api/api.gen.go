// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ApiErrorResponseType.
const (
	ApiErrorResponseTypeError   ApiErrorResponseType = "error"
	ApiErrorResponseTypeSuccess ApiErrorResponseType = "success"
)

// Defines values for ApiResponseBaseType.
const (
	ApiResponseBaseTypeError   ApiResponseBaseType = "error"
	ApiResponseBaseTypeSuccess ApiResponseBaseType = "success"
)

// Defines values for EmployeeRole.
const (
	EmployeeRoleAdmin    EmployeeRole = "admin"
	EmployeeRoleEmployee EmployeeRole = "employee"
	EmployeeRoleHr       EmployeeRole = "hr"
	EmployeeRoleManager  EmployeeRole = "manager"
)

// Defines values for EmployeeStatus.
const (
	Active    EmployeeStatus = "active"
	Fired     EmployeeStatus = "fired"
	Suspended EmployeeStatus = "suspended"
)

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Data   ApiErrorResponse_Data `json:"data"`
	Status int                   `json:"status"`
	Type   ApiErrorResponseType  `json:"type"`
}

// ApiErrorResponse_Data defines model for ApiErrorResponse.Data.
type ApiErrorResponse_Data struct {
	Error                *string                `json:"error,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ApiErrorResponseType defines model for ApiErrorResponse.Type.
type ApiErrorResponseType string

// ApiResponseBase defines model for ApiResponseBase.
type ApiResponseBase struct {
	Status int                 `json:"status"`
	Type   ApiResponseBaseType `json:"type"`
}

// ApiResponseBaseType defines model for ApiResponseBase.Type.
type ApiResponseBaseType string

// DepartmentForm defines model for DepartmentForm.
type DepartmentForm struct {
	// Description Описание департамента
	Description *string `json:"description"`

	// HeadId ID руководителя департамента
	HeadId *uint `json:"head_id"`

	// Name Название департамента
	Name string `json:"name"`

	// ParentId ID родительского департамента
	ParentId *uint `json:"parent_id"`
}

// Employee defines model for Employee.
type Employee struct {
	// Address Адрес сотрудника
	Address *string `json:"address"`

	// Birthday Дата рождения
	Birthday *time.Time `json:"birthday"`

	// CreatedAt Дата создания записи
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// DepartmentId ID департамента
	DepartmentId *uint `json:"department_id"`

	// Email Email сотрудника (уникальный)
	Email *string `json:"email"`

	// FireDate Дата увольнения
	FireDate *time.Time `json:"fire_date"`

	// FirstName Имя сотрудника
	FirstName string `json:"first_name"`

	// HireDate Дата приема на работу
	HireDate *time.Time `json:"hire_date"`

	// Id Уникальный идентификатор сотрудника
	Id *uint `json:"id,omitempty"`

	// IsActive Активен ли сотрудник
	IsActive *bool `json:"is_active,omitempty"`

	// LastName Фамилия сотрудника
	LastName string `json:"last_name"`

	// ManagerId ID руководителя
	ManagerId *uint `json:"manager_id"`

	// MiddleName Отчество сотрудника
	MiddleName *string `json:"middle_name"`

	// Password Password сотрудника
	Password *string `json:"password"`

	// PersonalNumber Табельный номер (уникальный)
	PersonalNumber *string `json:"personal_number"`

	// Phone Телефон сотрудника
	Phone *string `json:"phone"`

	// Position Должность сотрудника
	Position *string `json:"position"`

	// Role Роль сотрудника
	Role EmployeeRole `json:"role"`

	// SickDays Количество больничных дней
	SickDays *int `json:"sick_days,omitempty"`

	// Status Статус сотрудника
	Status EmployeeStatus `json:"status"`

	// UpdatedAt Дата последнего обновления
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// VacationDays Количество дней отпуска
	VacationDays *int `json:"vacation_days,omitempty"`
}

// EmployeeRole Роль сотрудника
type EmployeeRole string

// EmployeeStatus Статус сотрудника
type EmployeeStatus string

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Email Email сотрудника
	Email string `json:"email"`

	// Password Пароль сотрудника
	Password string `json:"password"`
}

// VacationRequest defines model for VacationRequest.
type VacationRequest struct {
	// Days Количество дней отпуска
	Days int `json:"days"`
}

// GetEmployeesParams defines parameters for GetEmployees.
type GetEmployeesParams struct {
	// Role Фильтр по роли (admin, hr, manager, employee)
	Role *string `form:"role,omitempty" json:"role,omitempty"`

	// DepartmentId Фильтр по ID департамента
	DepartmentId *int `form:"department_id,omitempty" json:"department_id,omitempty"`

	// Status Фильтр по статусу (active, fired, suspended)
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = LoginRequest

// CreateDepartmentJSONRequestBody defines body for CreateDepartment for application/json ContentType.
type CreateDepartmentJSONRequestBody = DepartmentForm

// UpdateDepartmentJSONRequestBody defines body for UpdateDepartment for application/json ContentType.
type UpdateDepartmentJSONRequestBody = DepartmentForm

// CreateEmployeeJSONRequestBody defines body for CreateEmployee for application/json ContentType.
type CreateEmployeeJSONRequestBody = Employee

// UpdateEmployeeJSONRequestBody defines body for UpdateEmployee for application/json ContentType.
type UpdateEmployeeJSONRequestBody = Employee

// RequestVacationJSONRequestBody defines body for RequestVacation for application/json ContentType.
type RequestVacationJSONRequestBody = VacationRequest

// Getter for additional properties for ApiErrorResponse_Data. Returns the specified
// element and whether it was found
func (a ApiErrorResponse_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApiErrorResponse_Data
func (a *ApiErrorResponse_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApiErrorResponse_Data to handle AdditionalProperties
func (a *ApiErrorResponse_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApiErrorResponse_Data to handle AdditionalProperties
func (a ApiErrorResponse_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Error != nil {
		object["error"], err = json.Marshal(a.Error)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вход в систему
	// (POST /auth/login)
	AuthLogin(w http.ResponseWriter, r *http.Request)
	// Выход из системы
	// (POST /auth/logout)
	AuthLogout(w http.ResponseWriter, r *http.Request)
	// Получение списка департаментов
	// (GET /departments)
	GetDepartments(w http.ResponseWriter, r *http.Request)
	// Создание департамента
	// (POST /departments)
	CreateDepartment(w http.ResponseWriter, r *http.Request)
	// Удаление департамента
	// (DELETE /departments/{id})
	DeleteDepartment(w http.ResponseWriter, r *http.Request, id int)
	// Получение департамента по ID
	// (GET /departments/{id})
	GetDepartmentByID(w http.ResponseWriter, r *http.Request, id int)
	// Обновление департамента
	// (PUT /departments/{id})
	UpdateDepartment(w http.ResponseWriter, r *http.Request, id int)
	// Получение списка сотрудников
	// (GET /employees)
	GetEmployees(w http.ResponseWriter, r *http.Request, params GetEmployeesParams)
	// Создание сотрудника
	// (POST /employees)
	CreateEmployee(w http.ResponseWriter, r *http.Request)
	// Удаление сотрудника
	// (DELETE /employees/{id})
	DeleteEmployee(w http.ResponseWriter, r *http.Request, id int)
	// Получение сотрудника по ID
	// (GET /employees/{id})
	GetEmployeesByID(w http.ResponseWriter, r *http.Request, id int)
	// Обновление сотрудника
	// (PUT /employees/{id})
	UpdateEmployee(w http.ResponseWriter, r *http.Request, id int)
	// Запрос отпуска
	// (POST /employees/{id}/vacation)
	RequestVacation(w http.ResponseWriter, r *http.Request, id int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Вход в систему
// (POST /auth/login)
func (_ Unimplemented) AuthLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Выход из системы
// (POST /auth/logout)
func (_ Unimplemented) AuthLogout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение списка департаментов
// (GET /departments)
func (_ Unimplemented) GetDepartments(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создание департамента
// (POST /departments)
func (_ Unimplemented) CreateDepartment(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удаление департамента
// (DELETE /departments/{id})
func (_ Unimplemented) DeleteDepartment(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение департамента по ID
// (GET /departments/{id})
func (_ Unimplemented) GetDepartmentByID(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновление департамента
// (PUT /departments/{id})
func (_ Unimplemented) UpdateDepartment(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение списка сотрудников
// (GET /employees)
func (_ Unimplemented) GetEmployees(w http.ResponseWriter, r *http.Request, params GetEmployeesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создание сотрудника
// (POST /employees)
func (_ Unimplemented) CreateEmployee(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удаление сотрудника
// (DELETE /employees/{id})
func (_ Unimplemented) DeleteEmployee(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение сотрудника по ID
// (GET /employees/{id})
func (_ Unimplemented) GetEmployeesByID(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновление сотрудника
// (PUT /employees/{id})
func (_ Unimplemented) UpdateEmployee(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Запрос отпуска
// (POST /employees/{id}/vacation)
func (_ Unimplemented) RequestVacation(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AuthLogin operation middleware
func (siw *ServerInterfaceWrapper) AuthLogin(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AuthLogout operation middleware
func (siw *ServerInterfaceWrapper) AuthLogout(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDepartments operation middleware
func (siw *ServerInterfaceWrapper) GetDepartments(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDepartments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDepartment operation middleware
func (siw *ServerInterfaceWrapper) CreateDepartment(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDepartment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDepartment operation middleware
func (siw *ServerInterfaceWrapper) DeleteDepartment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDepartment(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDepartmentByID operation middleware
func (siw *ServerInterfaceWrapper) GetDepartmentByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDepartmentByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDepartment operation middleware
func (siw *ServerInterfaceWrapper) UpdateDepartment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDepartment(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEmployees operation middleware
func (siw *ServerInterfaceWrapper) GetEmployees(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmployeesParams

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", r.URL.Query(), &params.Role)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role", Err: err})
		return
	}

	// ------------- Optional query parameter "department_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "department_id", r.URL.Query(), &params.DepartmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "department_id", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmployees(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateEmployee operation middleware
func (siw *ServerInterfaceWrapper) CreateEmployee(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEmployee(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEmployee operation middleware
func (siw *ServerInterfaceWrapper) DeleteEmployee(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEmployee(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEmployeesByID operation middleware
func (siw *ServerInterfaceWrapper) GetEmployeesByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmployeesByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateEmployee operation middleware
func (siw *ServerInterfaceWrapper) UpdateEmployee(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateEmployee(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RequestVacation operation middleware
func (siw *ServerInterfaceWrapper) RequestVacation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RequestVacation(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.AuthLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.AuthLogout)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/departments", wrapper.GetDepartments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/departments", wrapper.CreateDepartment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/departments/{id}", wrapper.DeleteDepartment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/departments/{id}", wrapper.GetDepartmentByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/departments/{id}", wrapper.UpdateDepartment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/employees", wrapper.GetEmployees)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/employees", wrapper.CreateEmployee)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/employees/{id}", wrapper.DeleteEmployee)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/employees/{id}", wrapper.GetEmployeesByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/employees/{id}", wrapper.UpdateEmployee)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/employees/{id}/vacation", wrapper.RequestVacation)
	})

	return r
}
