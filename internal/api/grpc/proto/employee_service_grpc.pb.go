// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: employee_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmployeeService_AuthLogin_FullMethodName         = "/employee_service.EmployeeService/AuthLogin"
	EmployeeService_AuthLogout_FullMethodName        = "/employee_service.EmployeeService/AuthLogout"
	EmployeeService_GetEmployees_FullMethodName      = "/employee_service.EmployeeService/GetEmployees"
	EmployeeService_CreateEmployee_FullMethodName    = "/employee_service.EmployeeService/CreateEmployee"
	EmployeeService_GetEmployeesByID_FullMethodName  = "/employee_service.EmployeeService/GetEmployeesByID"
	EmployeeService_UpdateEmployee_FullMethodName    = "/employee_service.EmployeeService/UpdateEmployee"
	EmployeeService_DeleteEmployee_FullMethodName    = "/employee_service.EmployeeService/DeleteEmployee"
	EmployeeService_RequestVacation_FullMethodName   = "/employee_service.EmployeeService/RequestVacation"
	EmployeeService_GetDepartments_FullMethodName    = "/employee_service.EmployeeService/GetDepartments"
	EmployeeService_CreateDepartment_FullMethodName  = "/employee_service.EmployeeService/CreateDepartment"
	EmployeeService_GetDepartmentByID_FullMethodName = "/employee_service.EmployeeService/GetDepartmentByID"
	EmployeeService_UpdateDepartment_FullMethodName  = "/employee_service.EmployeeService/UpdateDepartment"
	EmployeeService_DeleteDepartment_FullMethodName  = "/employee_service.EmployeeService/DeleteDepartment"
)

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	// AuthLogin authenticates a user and returns JWT tokens.
	AuthLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	// AuthLogout invalidates the current JWT token.
	AuthLogout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponse, error)
	// GetEmployees retrieves a list of employees with optional filters.
	GetEmployees(ctx context.Context, in *GetEmployeesRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	// CreateEmployee creates a new employee.
	CreateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ApiResponse, error)
	// GetEmployeesByID retrieves an employee by ID.
	GetEmployeesByID(ctx context.Context, in *GetEmployeeByIDRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	// UpdateEmployee updates an employee's details.
	UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	// DeleteEmployee deletes an employee.
	DeleteEmployee(ctx context.Context, in *DeleteEmployeeRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	// RequestVacation adds vacation days for an employee.
	RequestVacation(ctx context.Context, in *RequestVacationRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	// GetDepartments retrieves a list of departments.
	GetDepartments(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponse, error)
	// CreateDepartment creates a new department.
	CreateDepartment(ctx context.Context, in *DepartmentForm, opts ...grpc.CallOption) (*ApiResponse, error)
	// GetDepartmentByID retrieves a department by ID.
	GetDepartmentByID(ctx context.Context, in *GetDepartmentByIDRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	// UpdateDepartment updates a department's details.
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	// DeleteDepartment deletes a department.
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*ApiResponse, error)
}

type employeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeServiceClient(cc grpc.ClientConnInterface) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) AuthLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_AuthLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) AuthLogout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_AuthLogout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetEmployees(ctx context.Context, in *GetEmployeesRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetEmployees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) CreateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_CreateEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetEmployeesByID(ctx context.Context, in *GetEmployeeByIDRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetEmployeesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_UpdateEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) DeleteEmployee(ctx context.Context, in *DeleteEmployeeRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_DeleteEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) RequestVacation(ctx context.Context, in *RequestVacationRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_RequestVacation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetDepartments(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetDepartments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) CreateDepartment(ctx context.Context, in *DepartmentForm, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_CreateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetDepartmentByID(ctx context.Context, in *GetDepartmentByIDRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_GetDepartmentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_UpdateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, EmployeeService_DeleteDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
// All implementations must embed UnimplementedEmployeeServiceServer
// for forward compatibility.
type EmployeeServiceServer interface {
	// AuthLogin authenticates a user and returns JWT tokens.
	AuthLogin(context.Context, *LoginRequest) (*ApiResponse, error)
	// AuthLogout invalidates the current JWT token.
	AuthLogout(context.Context, *emptypb.Empty) (*ApiResponse, error)
	// GetEmployees retrieves a list of employees with optional filters.
	GetEmployees(context.Context, *GetEmployeesRequest) (*ApiResponse, error)
	// CreateEmployee creates a new employee.
	CreateEmployee(context.Context, *Employee) (*ApiResponse, error)
	// GetEmployeesByID retrieves an employee by ID.
	GetEmployeesByID(context.Context, *GetEmployeeByIDRequest) (*ApiResponse, error)
	// UpdateEmployee updates an employee's details.
	UpdateEmployee(context.Context, *UpdateEmployeeRequest) (*ApiResponse, error)
	// DeleteEmployee deletes an employee.
	DeleteEmployee(context.Context, *DeleteEmployeeRequest) (*ApiResponse, error)
	// RequestVacation adds vacation days for an employee.
	RequestVacation(context.Context, *RequestVacationRequest) (*ApiResponse, error)
	// GetDepartments retrieves a list of departments.
	GetDepartments(context.Context, *emptypb.Empty) (*ApiResponse, error)
	// CreateDepartment creates a new department.
	CreateDepartment(context.Context, *DepartmentForm) (*ApiResponse, error)
	// GetDepartmentByID retrieves a department by ID.
	GetDepartmentByID(context.Context, *GetDepartmentByIDRequest) (*ApiResponse, error)
	// UpdateDepartment updates a department's details.
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*ApiResponse, error)
	// DeleteDepartment deletes a department.
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*ApiResponse, error)
	mustEmbedUnimplementedEmployeeServiceServer()
}

// UnimplementedEmployeeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmployeeServiceServer struct{}

func (UnimplementedEmployeeServiceServer) AuthLogin(context.Context, *LoginRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (UnimplementedEmployeeServiceServer) AuthLogout(context.Context, *emptypb.Empty) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogout not implemented")
}
func (UnimplementedEmployeeServiceServer) GetEmployees(context.Context, *GetEmployeesRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployees not implemented")
}
func (UnimplementedEmployeeServiceServer) CreateEmployee(context.Context, *Employee) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) GetEmployeesByID(context.Context, *GetEmployeeByIDRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeesByID not implemented")
}
func (UnimplementedEmployeeServiceServer) UpdateEmployee(context.Context, *UpdateEmployeeRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) DeleteEmployee(context.Context, *DeleteEmployeeRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) RequestVacation(context.Context, *RequestVacationRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVacation not implemented")
}
func (UnimplementedEmployeeServiceServer) GetDepartments(context.Context, *emptypb.Empty) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartments not implemented")
}
func (UnimplementedEmployeeServiceServer) CreateDepartment(context.Context, *DepartmentForm) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedEmployeeServiceServer) GetDepartmentByID(context.Context, *GetDepartmentByIDRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentByID not implemented")
}
func (UnimplementedEmployeeServiceServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedEmployeeServiceServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedEmployeeServiceServer) mustEmbedUnimplementedEmployeeServiceServer() {}
func (UnimplementedEmployeeServiceServer) testEmbeddedByValue()                         {}

// UnsafeEmployeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeServiceServer will
// result in compilation errors.
type UnsafeEmployeeServiceServer interface {
	mustEmbedUnimplementedEmployeeServiceServer()
}

func RegisterEmployeeServiceServer(s grpc.ServiceRegistrar, srv EmployeeServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmployeeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmployeeService_ServiceDesc, srv)
}

func _EmployeeService_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_AuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).AuthLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_AuthLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).AuthLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_AuthLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).AuthLogout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetEmployees(ctx, req.(*GetEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_CreateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).CreateEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetEmployeesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetEmployeesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetEmployeesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetEmployeesByID(ctx, req.(*GetEmployeeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_UpdateEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).UpdateEmployee(ctx, req.(*UpdateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_DeleteEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).DeleteEmployee(ctx, req.(*DeleteEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_RequestVacation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVacationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).RequestVacation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_RequestVacation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).RequestVacation(ctx, req.(*RequestVacationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetDepartments(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).CreateDepartment(ctx, req.(*DepartmentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetDepartmentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetDepartmentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetDepartmentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetDepartmentByID(ctx, req.(*GetDepartmentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeService_ServiceDesc is the grpc.ServiceDesc for EmployeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employee_service.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthLogin",
			Handler:    _EmployeeService_AuthLogin_Handler,
		},
		{
			MethodName: "AuthLogout",
			Handler:    _EmployeeService_AuthLogout_Handler,
		},
		{
			MethodName: "GetEmployees",
			Handler:    _EmployeeService_GetEmployees_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _EmployeeService_CreateEmployee_Handler,
		},
		{
			MethodName: "GetEmployeesByID",
			Handler:    _EmployeeService_GetEmployeesByID_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _EmployeeService_UpdateEmployee_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _EmployeeService_DeleteEmployee_Handler,
		},
		{
			MethodName: "RequestVacation",
			Handler:    _EmployeeService_RequestVacation_Handler,
		},
		{
			MethodName: "GetDepartments",
			Handler:    _EmployeeService_GetDepartments_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _EmployeeService_CreateDepartment_Handler,
		},
		{
			MethodName: "GetDepartmentByID",
			Handler:    _EmployeeService_GetDepartmentByID_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _EmployeeService_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _EmployeeService_DeleteDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee_service.proto",
}
